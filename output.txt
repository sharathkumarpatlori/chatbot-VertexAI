
==== Start of Block 1 ====

==== Description of Block 1 ====
This block of code is the constructor of the `DlgDocument` class.
It initializes the user interface (UI) of a dialog window for creating and editing documentation.
Here's a brief explanation of what each part of the code does:

- It includes necessary header files for the dialog window, such as `DlgDocument.h`, `ui_DlgDocument.h`, and others.

- It defines the `DlgDocument` class, which inherits from `QDialog` and uses the `Ui::DlgDocument` class for its UI.

- Inside the constructor:
  - It sets up the UI elements using `setupUi(this)`.
  - It sets the window title using `setWindowTitle()`.

- It creates a new `QTextEdit` widget named `textEditRemark` and connects it to various signals and slots for handling text formatting and cursor position changes.

- It sets the font and font size for the `textEditRemark` widget.

- It populates the `cmbFontsize` combo box with standard font sizes.

- It enables mouse tracking for the dialog window.

- It sets up a custom context menu for the `textEditRemark` widget.

- It initializes the `defaultTextCharFormat` variable with the current character format of the `textEditRemark` widget.

- It creates another constructor for the `DlgDocument` class that takes an `IVDocument` object as an argument and initializes the dialog window with the provided document.

- It connects various UI elements (buttons, combo boxes, etc.) to their respective slots for handling user interactions, such as bold, italic, underline, font color, strikeout, bullet list, and more.

- It sets up the layout for the dialog window.

- It hides the "Add URL" button (`btnUrl`) until its functionality is fully implemented.

- It enables text interaction and link accessibility for the `textEditRemark` widget.

- It iterates through the child objects of the `textEditRemark` widget to find the `QWidgetTextControl` object and access its properties.

This code sets up the basic structure and functionality of the `DlgDocument` dialog window for creating and editing documentation, including UI initialization, text formatting, and handling user interactions.
==== End of Block 1 ====

==== Start of Block 2 ====

==== Description of Block 2 ====
This block of code is part of the constructor of the `DlgDocument` class.
It iterates through the child objects of the `textEditRemark` widget to find the `QWidgetTextControl` object and access its properties.
Here's a brief explanation of what it does:

- It uses a `for` loop to iterate through the child objects of the `textEditRemark` widget.

- For each child object, it gets the meta-properties using `metaObject()->property(i)` and stores them in the `metaproperty` variable.

- It then gets the name of the property using `metaproperty.name()` and stores it in the `name` variable.

- It gets the value of the property using `pObj->property(name)` and stores it in the `value` variable.

- It prints the property name and value using `qDebug()`.

- It sets the "openExternalLinks" property to `true` for the child object.

- It tries to cast the child object to a `QWidgetTextControl` object using `dynamic_cast<QWidgetTextControl*>(pObj)`.
If successful, it sets the "openExternalLinks" property to `true` and enables mouse tracking for the object.

This code is used to enable certain properties and behaviors for the `QWidgetTextControl` object, which is responsible for handling text editing and formatting within the `textEditRemark` widget.
==== End of Block 2 ====

==== Start of Block 3 ====

==== Description of Block 3 ====
This block of code contains several event handlers for the UI elements of the `DlgDocument` class.
Here's a brief explanation of each event handler:

- `onBoldButtonClicked()`:
  - Toggles the bold formatting for the selected text in the `textEditRemark` widget.
  - Updates the UI button style to indicate the current bold state.

- `onItalicButtonClicked()`:
  - Toggles the italic formatting for the selected text in the `textEditRemark` widget.
  - Updates the UI button style to indicate the current italic state.

- `onRedoButtonClicked()`:
  - Allows the user to redo the last undone action in the `textEditRemark` widget.

- `onUndoButtonClicked()`:
  - Allows the user to undo the last performed action in the `textEditRemark` widget.

- `onUnderlineButtonClicked()`:
  - Toggles the underline formatting for the selected text in the `textEditRemark` widget.
  - Updates the UI button style to indicate the current underline state.

- `onFontColorButtonClicked()`:
  - Opens a color dialog to allow the user to choose a text color.
  - Sets the selected color as the text color for the selected text in the `textEditRemark` widget.

- `onStrikeoutButtonClicked()`:
  - Toggles the strikeout formatting for the selected text in the `textEditRemark` widget.
  - Updates the UI button style to indicate the current strikeout state.

- `onBulletlistButtonClicked()`:
  - Attempts to add a bullet list to the selected text in the `textEditRemark` widget.
  - If the selected text is not already part of a list, it creates a new list.
  - If the selected text is already part of a list, it adds the selected text to the existing list.

These event handlers provide various text formatting options and editing capabilities for the user within the `DlgDocument` dialog window.
==== End of Block 3 ====

==== Start of Block 4 ====

==== Description of Block 4 ====
This block of code contains two event handlers for the UI elements of the `DlgDocument` class:

- `onBulletlistButtonClicked()`:
  - Attempts to add a bullet list to the selected text in the `textEditRemark` widget.
  - If the selected text is not already part of a list, it creates a new list.
  - If the selected text is already part of a list, it adds the selected text to the existing list.

- `onCheckmarkButtonClicked()`:
  - Attempts to add or remove a checkmark symbol from the selected text in the `textEditRemark` widget.
  - If the selected text is not already part of a list, it creates a new list with a checkmark symbol.
  - If the selected text is already part of a list, it removes the checkmark symbol from the list.

These event handlers provide additional formatting options for the user within the `DlgDocument` dialog window.
==== End of Block 4 ====

==== Start of Block 5 ====

==== Description of Block 5 ====
This block of code contains two methods:

- `openLinkInputDialog()`:
  - Opens a custom dialog window for the user to enter text and a web address.
  - Stores the current cursor position and selected text in the `DlgDocument` class.
  - Sets the initial values of the text and URL input fields in the dialog window based on the selected text and anchor href.
  - Connects the "linkSubmitted" signal from the dialog window to the `insertClickableText()` or `updateClickableText()` method of the `DlgDocument` class, depending on whether the selected text is already a clickable link or not.

- `LinkInputDialog()`:
  - Constructor for the `LinkInputDialog` class, which is a custom dialog window for entering text and a web address.
  - Sets up the UI elements and layout of the dialog window, including labels, input fields, and a submit button.
  - Connects the "linkSubmitted" signal to a slot that handles the user's input and emits the signal with the entered text and URL.

These methods provide a way for the user to add or edit clickable links within the `textEditRemark` widget of the `DlgDocument` dialog window.
==== End of Block 5 ====

==== Start of Block 6 ====

==== Description of Block 6 ====
This block of code contains several methods and event handlers for the `DlgDocument` and `LinkInputDialog` classes:

- `LinkInputDialog()`:
  - Constructor for the `LinkInputDialog` class, which is a custom dialog window for entering text and a web address.
  - Sets up the UI elements and layout of the dialog window, including labels, input fields, and a submit button.
  - Connects the "linkSubmitted" signal to a slot that handles the user's input and emits the signal with the entered text and URL.

- `onSubmitButtonClicked()`:
  - Event handler for the submit button in the `LinkInputDialog`.
  - Emits the "linkSubmitted" signal with the entered text and URL, and closes the dialog window.

- `insertClickableText()`:
  - Inserts clickable text with a specified URL into the `textEditRemark` widget of the `DlgDocument` class.
  - Converts the URL to the "http" format if it doesn't start with "http".
  - Resets the text formatting to the default format after inserting the clickable text.

- `updateClickableText()`:
  - Updates the URL of an existing clickable text in the `textEditRemark` widget.
  - Creates a new text format with the edited URL and applies it to the selected link.
  - Resets the text formatting to the default format after updating the clickable text.

- `showContextMenu()`:
  - Event handler for the custom context menu of the `textEditRemark` widget.
  - Stores the current cursor position and retrieves the cursor at the specified position.
  - Checks if the cursor is within a clickable link and adds an "Edit Link" option to the context menu if it is.

These methods and event handlers provide functionality for inserting, updating, and editing clickable links within the `textEditRemark` widget of the `DlgDocument` dialog window.
==== End of Block 6 ====

==== Start of Block 7 ====

==== Description of Block 7 ====
This block of code contains several methods and event handlers for the `DlgDocument` class:

- `showContextMenu()`:
  - Continued from the previous block, this method adds an "Edit URL" and "Remove URL" option to the custom context menu if the cursor is within a clickable link.
  - Connects the "Edit URL" action to the `editLink()` method and the "Remove URL" action to the `removeLink()` method.

- `editLink()`:
  - Checks if the cursor is within a clickable link.
  - Finds the start and end positions of the URL within the selected text.
  - Extracts the link text and URL.
  - Opens a `LinkInputDialog` to allow the user to edit the link.

- `removeLink()`:
  - Checks if the cursor is within a clickable link.
==== End of Block 7 ====

==== Start of Block 8 ====

==== Description of Block 8 ====
This block of code contains several methods and event handlers for the `DlgDocument` class:

- `removeLink()`:
  - Continued from the previous block, this method removes the URL link from the selected text.
  - Finds the start and end positions of the URL within the selected text.
  - Resets the text formatting to the default format for the selected text.

- `textFamily()`:
  - Sets the font family for the selected text or the current word.
  - Merges the specified font family format with the current character format.

- `textSize()`:
  - Sets the font size for the selected text or the current word.
  - Merges the specified font size format with the current character format.

- `mergeFormatOnWordOrSelection()`:
  - Helper method for merging a specified character format with the current character format of the selected text or the current word.
==== End of Block 8 ====

==== Start of Block 9 ====

==== Description of Block 9 ====
This block of code contains several event handlers and methods for the `DlgDocument` class:

- `mergeFormatOnWordOrSelection()`:
  - Continued from the previous block, this method merges the specified character format with the current character format of the selected text or the current word.

- `fontChanged()`:
  - Updates the font family and font size combo boxes based on the specified font.

- `colorChanged()`:
  - Updates the text color action icon based on the specified color.

- `alignmentChanged()`:
  - Updates the alignment action buttons based on the specified alignment.

- `currentCharFormatChanged()`:
  - Updates the font family, font size, and text color based on the specified character format.

- `cursorPositionChanged()`:
  - Updates the alignment action buttons, bullet list style combo box, and checkmark action button based on the current cursor position and text format.
==== End of Block 9 ====

==== Start of Block 10 ====

==== Description of Block 10 ====
This block of code contains several methods and event handlers for the `DlgDocument` class:

- `confirmKeepChanges()`:
  - Prompts the user to confirm keeping changes if the header or remark text has been modified.

- `keyPressEvent()`:
  - Handles key press events, including shortcuts for bold, italic, underline, strikeout, and opening the link input dialog.

- `mouseMoveEvent()`:
  - Handles mouse move events and displays a tooltip with the URL if the cursor is hovering over a clickable link.
==== End of Block 10 ====

==== Start of Block 11 ====

==== Description of Block 11 ====
This block of code contains the remaining part of the `mouseMoveEvent()` method for the `DlgDocument` class:

- `mouseMoveEvent()`:
  - Continued from the previous block, this method displays a tooltip with the URL if the cursor is hovering over a clickable link.
==== End of Block 11 ====
